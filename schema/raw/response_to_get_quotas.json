{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Array_of_RateLimit",
  "type": "array",
  "items": {
    "$ref": "#/definitions/RateLimit"
  },
  "definitions": {
    "Flow": {
      "description": "A Flow represents the transfer of value for a denom through an IBC channel during a time window.\n\nIt tracks inflows (transfers into neturon) and outflows (transfers out of neturon).\n\nThe period_end represents the last point in time for which this Flow is tracking the value transfer.\n\nPeriods are discrete repeating windows. A period only starts when a contract call to update the Flow (SendPacket/RecvPackt) is made, and not right after the period ends. This means that if no calls happen after a period expires, the next period will begin at the time of the next call and be valid for the specified duration for the quota.\n\nThis is a design decision to avoid the period calculations and thus reduce gas consumption",
      "type": "object",
      "required": [
        "inflow",
        "outflow",
        "period_end"
      ],
      "properties": {
        "inflow": {
          "$ref": "#/definitions/Uint256"
        },
        "outflow": {
          "$ref": "#/definitions/Uint256"
        },
        "period_end": {
          "$ref": "#/definitions/Timestamp"
        }
      },
      "additionalProperties": false
    },
    "Quota": {
      "description": "A Quota is the percentage of the denom's total value that can be transferred through the channel in a given period of time (duration)\n\nPercentages can be different for send and recv\n\nThe name of the quota is expected to be a human-readable representation of the duration (i.e.: \"weekly\", \"daily\", \"every-six-months\", ...)",
      "type": "object",
      "required": [
        "duration",
        "max_percentage_recv",
        "max_percentage_send",
        "name"
      ],
      "properties": {
        "channel_value": {
          "anyOf": [
            {
              "$ref": "#/definitions/Uint256"
            },
            {
              "type": "null"
            }
          ]
        },
        "duration": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "max_percentage_recv": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_percentage_send": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "RateLimit": {
      "description": "RateLimit is the main structure tracked for each channel/denom pair. Its quota represents rate limit configuration, and the flow its current state (i.e.: how much value has been transfered in the current period)",
      "type": "object",
      "required": [
        "flow",
        "quota"
      ],
      "properties": {
        "flow": {
          "$ref": "#/definitions/Flow"
        },
        "quota": {
          "$ref": "#/definitions/Quota"
        }
      },
      "additionalProperties": false
    },
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint256": {
      "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
      "type": "string"
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
